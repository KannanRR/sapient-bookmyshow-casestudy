@RestController
@RequestMapping("/theatre")
@AllArgsConstructor
public class TheatreController {

    private TheatreService theatreService;
    @PostMapping
    public Theatre createTheatre(@RequestBody CreateTheatreRequest request) {
        return theatreService.createTheatre(request);
    }

    @GetMapping("/{id}")
    public Theatre getTheatrebyId(@PathVariable Long id) {
        return theatreService.getTheatre(id);
    }

    @DeleteMapping("/{id}")
    public Theatre deleteTheatre(@PathVariable Long id) {
        return theatreService.deleteTheatre(id);
    }

    @PutMapping("/{id}")
    public Theatre updateMovie(@PathVariable Long id, @RequestBody CreateTheatreRequest request) {
        return theatreService.updateTheatre(id, request);
    }

}
@Getter
@Setter
@Entity
@AllArgsConstructor
@NoArgsConstructor
@Builder(toBuilder = true)
public class Booking extends BaseModel {

    @ManyToOne
    private Customer customer;
    @ManyToOne
    private Show show;
    @ManyToMany
    private List<ShowSeat> seats = new ArrayList<>();

    private Double amount;
    private Date bookedAt;

    @Enumerated
    private BookingStatus status;

    @OneToMany
    private List<Payment> payments = new ArrayList<>();
}
@Getter
@Setter
@Entity
public class City extends BaseModel {

    private String name;

    @OneToMany(mappedBy = "city")
    private List<Theatre> theatres = new ArrayList<>();

    @Column(columnDefinition = "boolean default false")
    private Boolean isDeleted = false;
}
@Entity
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Customer extends BaseModel {

    private String fullName;
    private String city;
    private String phoneNumber;
    private String email;

    @OneToOne
    @JsonIgnore
    private User user;
}
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder(toBuilder = true)
@Entity
public class Hall extends BaseModel {

    private String name;

    @OneToMany(mappedBy = "hall")
    private List<Seat> seats = new ArrayList<>();

    @ElementCollection
    @Enumerated
    private List<MovieFeature> features = new ArrayList<>();

}
@Getter
@Setter
@Entity
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class Movie extends BaseModel {
    private String name;
    private Double rating;

    @ElementCollection
    @Enumerated
    private List<Language> languages = new ArrayList<>();

    @ElementCollection
    @Enumerated
    private List<MovieFeature> features = new ArrayList<>();

    @OneToMany(mappedBy = "movie")
    private List<Show> shows = new ArrayList<>();

    @Column(columnDefinition = "boolean default false")
    private Boolean isDeleted = false;
}
@Getter
@Setter
@Entity
public class Payment extends BaseModel {

    private String reference;
    private Double amount;

    @Enumerated
    private PaymentMethodType providerType;

    @Enumerated
    private PaymentStatus status;
}
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
public class Seat extends BaseModel {

    private Integer rowNo;
    private Integer columnNo;
    @Enumerated
    private SeatType seatType;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "hall_id")
    @JsonIgnore
    private Hall hall;

}
@Getter
@Setter
@Entity
@Table(name = "shows")
@NoArgsConstructor
@Builder(toBuilder = true)
@AllArgsConstructor
public class Show extends BaseModel {

    @ManyToOne
    @JoinColumn(name = "movie_id")
    @JsonIgnore
    private Movie movie;
    private Date startTime;
    private Integer duration;
    private LocalDate startDate;

    @ManyToOne
    private Hall hall;

    @OneToMany(mappedBy = "show")
    private List<ShowSeat> showSeats = new ArrayList<>();

    @Column(columnDefinition = "boolean default false")
    private Boolean isDeleted = false;

    @Column(columnDefinition = "boolean default false")
    private Boolean isOnline = false;
}
@Getter
@Setter
@Entity
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class ShowSeat extends BaseModel {
    @ManyToOne
    @JoinColumn(name = "show_id")
    @JsonIgnore
    private Show show;

    @ManyToOne
    private Seat seat;

    @Enumerated
    private SeatStatus status;

}
@Getter
@Setter
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Theatre extends BaseModel {

    @ManyToOne
    @JoinColumn(name = "city_id")
    @JsonIgnore
    private City city;

    private String name;
    private String address;

    @OneToMany
    private List<Hall> halls = new ArrayList<>();

    @OneToMany
    private List<Show> shows = new ArrayList<>();

    @Column(columnDefinition = "boolean default false")
    private Boolean isDeleted = false;
}
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class User extends BaseModel {
    @Column(nullable = false)
    private String username;
    @Column(nullable = false)
    private String password;

}
@Data
public class CreateBookingRequest {
    private Long customerId;
    private Long showId;
    private List<Long> showSeatsId = new ArrayList<>();
}
@Data
public class CreateCityResponse {
    private String name;
}
@AllArgsConstructor
@Getter
public class CreateCustomerDTO {
    private String fullName;
    private String city;
    private String phoneNumber;
    private String email;
    private String username;
    private String password;
}
@Data
public class CreateHallRequest {
    private String name;
    private List<MovieFeature> features = new ArrayList<>();
    private Map<SeatType, List<SeatPosition>> seatRanges = new HashMap<>();
}
@Getter
@Setter
public class CreateMovieRequest {
    private String name;
    private Double rating;
    private List<Language> languages = new ArrayList<>();
    private List<MovieFeature> features = new ArrayList<>();

    public Movie toMovie() {
        return Movie.builder()
                .name(name)
                .rating(rating)
                .features(features)
                .languages(languages)
                .isDeleted(false)
                .build();
    }

}
@Data
public class CreateMovieResponse {
    private String name;
}
@Data
public class CreateShowRequest {
    private Long hallId;
    private Long movieId;
    private Date startTime;
    private Integer duration;
    private Boolean isOnline;
}
@AllArgsConstructor
@Getter
public class CreateTheatreRequest {
    private Long cityid;
    private String name;
    private String address;
    private List<Long> halls = new ArrayList<>();
    private List<Long> shows = new ArrayList<>();
}
@Data
@AllArgsConstructor
public class SeatPosition {
    private Integer rowNo;
    private Integer columnNo;
}

create api contract doc in yaml 
